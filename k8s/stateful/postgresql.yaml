apiVersion: v1
kind: Namespace
metadata:
  # 确保 stateful 命名空间存在
  name: stateful

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret # Changed name
  namespace: stateful
type: Opaque
stringData:
  # 在这里设置你的 PostgreSQL 'postgres' 用户的密码
  # !! 不要使用简单密码，并确保安全存储 !!
  POSTGRES_PASSWORD: "123456" # Changed key and value
  # 你也可以在这里添加 POSTGRESQL_USER, POSTGRESQL_DATABASE 等
  # POSTGRESQL_DATABASE: "mydatabase"
  # POSTGRESQL_USER: "myuser"
  # POSTGRESQL_PASSWORD: "myuserpassword" # 注意：这会覆盖上面的密码设置

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config # Changed name
  namespace: stateful
data:
  # PostgreSQL 初始化脚本 (语法通常与 MySQL 兼容)
  evolve.sql: |
    drop database if exists evolve;
    create database evolve;
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: stateful
  name: postgres # Changed name
spec:
  serviceName: "postgres" # Changed name
  selector:
    matchLabels:
      app: postgres # Changed label
  template:
    metadata:
      labels:
        app: postgres # Changed label
    spec:
      containers:
        - name: postgres # Changed name
          # 推荐使用具体的版本号
          image: postgres:latest # Changed image
          ports:
            - containerPort: 5432 # Changed port
              name: postgres # Changed port name
          # PostgreSQL (Bitnami) 使用的环境变量
          env:
            - name: POSTGRES_PASSWORD # Changed env var name
              valueFrom:
                secretKeyRef:
                  name: postgres-secret # Changed secret name
                  key: POSTGRES_PASSWORD # Changed secret key
          volumeMounts:
            - name: postgres-persistent-storage # Changed name
              # Bitnami PostgreSQL 默认的数据目录
              mountPath: /var/lib/postgresql/data # Changed data path
            # 挂载初始化脚本
            - name: config
              mountPath: /docker-entrypoint-initdb.d/evolve.sql # 挂载初始化脚本
              subPath: evolve.sql
          resources: # 根据你的需求调整资源限制
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          # 探针检查 PostgreSQL 是否健康
          livenessProbe:
            tcpSocket:
              port: 5432 # Changed port
            initialDelaySeconds: 45 # PG 启动可能稍慢
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 5432 # Changed port
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: config # 定义配置卷
          configMap:
            name: postgres-config # Changed ConfigMap name

  # 为每个 Pod 动态创建持久卷声明
  volumeClaimTemplates:
    - metadata:
        name: postgres-persistent-storage # Changed PVC name
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "standard"
        resources:
          requests:
            storage: 1Gi # 请求 1GB 的存储空间，按需调整

---

apiVersion: v1
kind: Service
metadata:
  namespace: stateful
  name: postgres # Changed service name
spec:
  type: NodePort # 使用 NodePort 类型暴露服务
  selector:
    app: postgres # Changed selector label
  ports:
  - protocol: TCP
    port: 5432        # Service 在集群内部监听的端口
    targetPort: 5432  # Pod 内容器监听的端口 (postgres 服务的端口)
    # !! 选择一个与 MySQL 和 Redis 不同且可用的 NodePort !!
    nodePort: 30704 # Changed NodePort