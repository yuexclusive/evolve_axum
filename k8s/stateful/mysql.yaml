apiVersion: v1
kind: Namespace
metadata:
  # 确保 stateful 命名空间存在
  name: stateful

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: stateful
type: Opaque
stringData:
  # 在这里设置你的 MySQL root 密码
  # !! 不要使用简单密码，并确保安全存储 !!
  MYSQL_ROOT_PASSWORD: "123456"
  # 你也可以在这里添加 MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
  # 来自动创建非 root 用户和数据库，例如:
  # MYSQL_DATABASE: "mydatabase"
  # MYSQL_USER: "myuser"
  # MYSQL_PASSWORD: "myuserpassword"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config # 可选的 MySQL 配置文件
  namespace: stateful
data:
  evolve.sql: |
    drop database if exists evolve;
    create database evolve;
  my.cnf: |
    # 在这里可以添加自定义的 MySQL 配置项
    # 例如：
    # [mysqld]
    # max_connections = 200
    # skip-name-resolve

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: stateful
  name: mysql
spec:
  serviceName: "mysql" # 对应下面 Service 的名字
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          # 推荐使用具体的版本号，而不是 latest
          image: bitnami/mysql
          ports:
            - containerPort: 3306
              name: mysql # 给端口命名是个好习惯
          # MySQL 容器通过环境变量来设置密码和初始化
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  # 从上面创建的 Secret 中获取 root 密码
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            # 如果你在 Secret 中定义了其他变量，也在这里引用：
            # - name: MYSQL_DATABASE
            #   valueFrom:
            #     secretKeyRef:
            #       name: mysql-secret
            #       key: MYSQL_DATABASE
            # - name: MYSQL_USER
            #   valueFrom:
            #     secretKeyRef:
            #       name: mysql-secret
            #       key: MYSQL_USER
            # - name: MYSQL_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: mysql-secret
            #       key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysql-persistent-storage # 挂载持久化存储卷
              # MySQL 默认的数据目录
              mountPath: /var/lib/mysql
            - name: config # 挂载配置卷 (可选)
              mountPath: /etc/mysql/conf.d
            - name: config
              mountPath: /docker-entrypoint-initdb.d/evolve.sql
              subPath: evolve.sql
          resources: # 根据你的需求调整资源限制
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          # 探针检查 MySQL 是否健康
          livenessProbe:
            tcpSocket:
              port: 3306 # 检查 3306 端口是否可连接
            initialDelaySeconds: 30 # 给 MySQL 启动留足时间
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 10 # 可以更快地检查就绪状态
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: config # 定义配置卷 (可选)
          configMap:
            name: mysql-config
  # 为每个 Pod 动态创建持久卷声明
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage # 卷的名字，与上面的 volumeMounts 对应
      spec:
        accessModes: ["ReadWriteOnce"] # 单节点读写
        storageClassName: "standard"   # Kind 默认的 StorageClass
        resources:
          requests:
            # 请求 1GB 的存储空间，按需调整
            storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  namespace: stateful
  name: mysql # Service 名称，需要和 StatefulSet 的 serviceName 匹配
spec:
  type: NodePort # 使用 NodePort 类型暴露服务
  selector:
    app: mysql # 选择具有 app=mysql 标签的 Pod
  ports:
  - protocol: TCP
    port: 3306        # Service 在集群内部监听的端口
    targetPort: 3306  # Pod 内容器监听的端口 (mysql 服务的端口)
    # !! 选择一个与 Redis 不同且可用的 NodePort !!
    # 确保这个端口在你的 Kind 配置中被映射 (如果使用了 extraPortMappings)
    # 或者在你的宿主机防火墙中是允许的
    nodePort: 30706