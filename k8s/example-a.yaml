apiVersion: v1
kind: Namespace
metadata:
  name: demo

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-a
  namespace: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-a
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled  # 启用Linkerd Sidecar注入
      labels:
        app: service-a
    spec:
      containers:
        - name: service-a
          image: python:3.9-alpine
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install flask requests && \
              echo '
              from flask import Flask, request
              import requests
              app = Flask(__name__)

              @app.route("/")
              def call_service_b():
                  # 调用服务B
                  response = requests.get("http://my-service.demo.svc.cluster.local/")
                  if response.status_code == 200:
                      # 在服务B返回的内容上添加标记
                      modified_content = response.text.replace("<body>", "<body><h1>Modified by Service A</h1>")
                      return modified_content
                  else:
                      return f"Error calling Service B: {response.status_code}"

              if __name__ == "__main__":
                  app.run(host="0.0.0.0", port=8080)
              ' > app.py && \
              python app.py
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: service-a
  namespace: demo
spec:
  type: NodePort  # 暴露为NodePort，以便外部访问
  selector:
    app: service-a
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30701  # 指定NodePort端口    